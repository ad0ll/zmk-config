#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#define DEFAULT 0
#define SYMBOL 1
#define JERK   2
#define NUMPAD   3
#define GAME   4
#define GAME_KEYPAD  5
#define GAME_NUMPAD  6

/ {
	
  behaviors {        
	  lh_pht: left_hand_positional_hold_tap {            
		compatible = "zmk,behavior-hold-tap";
		label = "POSITIONAL_HOLD_TAP";
		#binding-cells = <2>;
		flavor = "tap-unless-interrupted";
		tapping-term-ms = <120>; // <---[[produces tap if held longer than tapping-term-ms]]          
		quick-tap-ms = <400>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <18 19 20 21 22 23>; // <---[[right-hand keys]]   
	};
	rh_pht: right_hand_positional_hold_tap {            
		compatible = "zmk,behavior-hold-tap";
		label = "POSITIONAL_HOLD_TAP";
		#binding-cells = <2>;
		flavor = "tap-unless-interrupted";
		tapping-term-ms = <120>; // <---[[produces tap if held longer than tapping-term-ms]]          
		quick-tap-ms = <400>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <12 13 14 15 16 17>; // <---[[left-hand keys]]   
	};
		hm: homerow_mods {            
			compatible = "zmk,behavior-hold-tap";            
			label = "HOMEROW_MODS";            
			#binding-cells = <2>;            
			tapping-term-ms = <129>;            
			quick_tap_ms = <400>;            
			//flavor = "balanced";           
			flavor = "tap-preferred"; 
			bindings = <&kp>, <&kp>;        
		};    
	};

    combos {        
		compatible = "zmk,combos";        
		combo_btc {            
			timeout-ms = <50>;            
			key-positions = <0 12>;            
			bindings = <&bt BT_CLR>;  
		}; 
		combo_min2 {            
			timeout-ms = <50>;            
			key-positions = <3 4>;            
			bindings = <&kp MINUS>;  
		}; 
	
		combo_quot2 { 
			timeout-ms = <50>;             
			key-positions = <27 28>;            
			bindings = <&kp QUOT>;  
		};
	};

	keymap {
		compatible = "zmk,keymap";

		default_layer {
			bindings = <
			 &kp ESC    &kp Q  &kp W     &kp F       &kp P      &kp B  &kp  J  &kp L       &kp U          &kp Y     &kp SEMI     &kp BSLH  
 &kp DEL    &lt JERK A  &hm LALT R  &hm LCTRL S   &hm LSHIFT T     &kp G                                            &kp M   &hm RSHIFT N     &hm RCTRL E       &hm RALT I  &lt SYMBOL O  &kp SQT   
 &kp LSHFT  &kp Z          &kp X       &kp C         &kp D            &kp V  &kp  TAB &kp LGUI  &kp PSCRN  &kp LGUI  &kp K   &kp H           &kp COMMA         &kp DOT     &kp FSLH       &kp RSHIFT 
 &kp LGUI   &trans         &kp BSPC      &lt JERK RET  &lt NUMPAD BSPC                                                           &kp TAB  &lt NUMPAD SPACE  &trans      &trans         &kp RGUI  
 >;
		};
			symbol_layer {
			bindings = <
 &kp TILDE  &kp DLLR   &kp AMPS        &kp LBRC        &kp RBRC         &kp PRCNT                                  &trans  &kp HOME   &kp UP    &kp END      &trans  &trans 
 &kp GRAVE  &kp EXCL   &hm LALT EQUAL  &hm LCTRL LPAR  &hm LSHIFT RPAR  &kp STAR                                  &trans  &kp LEFT   &kp DOWN  &kp RIGHT    &trans  &trans 
 &kp AT      &kp PIPE  &kp PLUS        &kp LBKT        &kp RBKT         &kp POUND   &kp LGUI  &kp BSPC  &kp BSPC  &kp LGUI  &trans  &kp PG_UP  &trans    &kp PG_DN  &trans  &trans 
 &kp CARET     &trans     &kp BSPC          &kp RET         &kp TAB                                                            &kp BSPC  &kp SPC  &trans  &trans  &trans 
>;
};
		jerk_layer {
			bindings = <
 &kp ESC  &kp PG_UP  &kp PG_DN    &kp CARET      &kp DLLR         &trans                                  &trans  &kp PG_UP   &kp UP    &kp PG_DN      &trans  &trans 
 &trans  &trans     &hm LALT MINUS  &hm LCTRL SQT  &hm LSHIFT BSPC  &trans                                  &trans  &kp LEFT   &kp DOWN  &kp RIGHT    &trans  &trans 
 &trans  &trans     &trans         &kp HOME       &kp END          &trans  &kp LGUI  &kp BSPC  &kp BSPC  &kp LGUI  &trans  &kp HOME  &trans    &kp END  &trans  &trans 
 &trans  &trans     &kp BSPC         &kp RET         &kp BSPC                                                   &trans  &trans     &trans    &tog GAME_KEYPAD    &tog GAME    
>;

};
		numpad_layer {
			bindings = <
 &kp ESC  &kp COMMA  &kp N7  &kp N8  &kp N9 &kp PLUS                                  &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans 
 &trans  &kp N0  &hm LALT N4  &hm LCTRL N5  &hm LSHIFT N6  &kp STAR                                  &trans  &hm RSHIFT F5   &hm RCTRL F6   &hm RALT F7   &kp F8  &trans 
 &trans  &kp FSLH  &kp N1  &kp N2  &kp N3  &kp MINUS  &kp COMMA  &kp BSPC  &kp BSPC  &kp LGUI  &trans  &kp F1   &kp F2   &kp F3   &kp F4  &trans 
 &kp N0  &kp N0  &kp BSPC  &kp RET  &kp DOT                                  &trans  &trans   &trans   &trans   &trans
>;
	};
		game_layer {
			bindings = <
&kp ESC   &kp T      &kp Q  &kp W    &kp E    &kp R                                          &kp T  &kp Y    &kp U   &kp I      &kp O     &kp P
&kp DEL   &kp LSHFT  &kp A  &kp S    &kp D    &kp F                                          &kp G  &kp H    &kp J   &kp L      &kp SEMI  &kp SQT
&kp LALT  &kp LCTRL  &kp Z  &kp X    &kp C    &kp V  &kp ESC &tog GAME    &trans &trans  &kp B  &kp N    &kp M   &kp COMMA  &kp DOT   &kp RSHFT
 &trans  &trans  &trans  &kp SPC  &lt GAME_NUMPAD RET                                                    &trans   &trans  &trans     &trans    &trans
>;
		};
				game_keypad_layer {
			bindings = <
&kp ESC   &kp T      &kp Q  &kp UP    &kp E    &kp R                                          &kp T  &kp Y    &kp U   &kp I      &kp O     &kp P
&kp DEL   &kp LSHFT  &kp LEFT  &kp DOWN    &kp RIGHT    &kp F                                          &kp G  &kp Z    &kp X   &kp C      &kp D  &kp SQT
&kp LALT  &kp LCTRL  &kp Z  &kp X    &kp C    &kp V  &kp ESC &tog GAME_KEYPAD    &trans &trans  &kp B  &kp N    &kp M   &kp COMMA  &kp DOT   &kp RSHFT
 &trans  &trans  &trans  &kp SPC  &lt GAME_NUMPAD RET                                                    &trans   &trans  &trans     &trans    &trans
>;
		};


			game_numpad_layer {
			bindings = <
 &trans  &trans &kp N7  &kp N8  &kp N9 &kp STAR                                  &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans 
 &trans  &kp N0  &hm LALT N4  &hm LCTRL N5  &hm LSHIFT N6  &kp PLUS	&trans  &hm RSHIFT F5   &hm RCTRL F6   &hm RALT F7   &kp F8  &trans 
 &trans  &trans  &kp N1  &kp N2  &kp N3  &kp MINUS  &kp COMMA  &kp BSPC  &kp BSPC  &kp LGUI  &trans  &kp F1   &kp F2   &kp F3   &kp F4  &trans 
 &kp N0  &trans  &trans  &trans  &trans                                 		 &trans  &trans   &trans   &trans   &trans
>;
	};
};

};